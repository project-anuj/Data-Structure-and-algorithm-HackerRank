#include<bits/stdc++.h>
using namespace std;
long dp[51][251];

long knapsackUnbounded(int a[],int n,int m)
{
    if(m==0)
    return 0;
    if(n==0)
    return 1;
    if(dp[m][n]!=-1)
    return dp[m][n];
    if(a[m-1]>n)
    return dp[m][n]=knapsackUnbounded(a,n,m-1);
    else
    return dp[m][n]=knapsackUnbounded(a,n,m-1)+knapsackUnbounded(a,n-a[m-1],m);
}
int main()
{    
    memset(dp,-1,sizeof(dp));
    int n,m;
    cin>>n>>m;
    int a[m];
    for(int i=0;i<m;i++)
    cin>>a[i];
    cout<<knapsackUnbounded(a,n,m);
}
